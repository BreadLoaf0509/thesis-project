<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>MedExtract</title>
    <link rel="stylesheet" href="/css/style.css" />
    <link rel="stylesheet" href="/css/user/user-settings.css" />
</head>

<body>
    <nav class="user-navbar">
        <div class="container">
            <div class="logo">
                <h1><a href="#">MedExtract</a></h1>
            </div>

            <div class="current-user">
                <h5 class="username-holder">Hey there! <%= username %>
                </h5>
            </div>

            <ul class="nav">
                <li><a href="/user-extract">Extract</a></li>
                <li><a href="/user-search">Search</a></li>
                <li><a href="/user-settings">Settings</a></li>
                <li><a href="/">Log Out</a></li>
            </ul>
        </div>
    </nav>

    <div class="message-container">
        <div class="container">
            <div class="server-message">SERVER MESSAGE WILL SHOW HERE</div>
        </div>
    </div>




    <section class="tabs">
        <div class="container">
            <div class="tab-container">
                <div class="tab-box">
                    <button class="tab-btn active">User Information</button>
                    <button class="tab-btn">Account Security</button>
                    <button class="tab-btn">Delete Account</button>
                    <button class="tab-btn">Query History</button>
                    <div class="line"></div>
                </div>
                <div class="content-box">
                    <div class="content active">
                        <form id="change-username" class="show">
                            <h1>Change User Information</h1>
                            <h4>You are not allowed to change your email.</h4>
                            <p class="email-holder">Email: <%= email %>
                            </p>

                            <div class="input-control">
                                <label for="username">New Username</label>
                                <input id="username" name="username" type="text" />
                                <div class="error"></div>
                            </div>
                            <button type="submit">Save Changes</button>
                        </form>
                    </div>

                    <div class="content">
                        <form id="change-password" class="show">
                            <h1>Change Password</h1>
                            <div class="input-control">
                                <label for="password1">Current Password</label>
                                <input id="password1" name="password1" type="password" />
                                <div class="error"></div>
                                <div class="password">
                                    <label for="show-password1">Show Password</label>
                                    <input type="checkbox" id="show-password1" class="show-password" />
                                </div>
                            </div>
                            <div class="input-control">
                                <label for="password2">New Password</label>
                                <input id="password2" name="password2" type="password" />
                                <div class="error"></div>
                                <div class="password">
                                    <label for="show-password2">Show Password</label>
                                    <input type="checkbox" id="show-password2" class="show-password" />
                                </div>
                            </div>
                            <button type="submit">Save Changes</button>
                        </form>
                    </div>

                    <div class="content">
                        <form id="delete-account" class="show">
                            <h1>Confirm Account Deletion</h1>
                            <div class="input-control">
                                <label for="delete_acc">Type "DELETE ACCOUNT" for confirmation</label>
                                <input id="delete_acc" name="delete_acc" type="text" />
                                <div class="error"></div>
                            </div>
                            <div class="input-control">
                                <label for="password3">Password</label>
                                <input id="password3" name="password1" type="password" />
                                <div class="error"></div>
                                <div class="password">
                                    <label for="show-password3">Show Password</label>
                                    <input type="checkbox" id="show-password3" class="show-password" />
                                </div>
                            </div>
                            <button type="submit">Delete Account</button>
                        </form>
                    </div>

                    <div class="content">

                        <button type="button" id="show-save" onclick="showSave()">Empty Save Slot</button>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <div id="modal_container" class="modal-container">
        <div class="modal empty">
            <h1 id="modal-title">Empty Save Slot</h1>

            <div class="tabs2">
                <div class="container">
                    <div class="tab-container2">
                        <div class="tab-box2">
                            <button class="tab-btn2 active">Medication Details</button>
                            <button class="tab-btn2">Drug Interactions</button>
                            <button class="tab-btn2">Dosage Guidelines</button>
                            <button class="tab-btn2">Side Effects</button>
                            <button class="tab-btn2">Drug Prices</button>
                            <div class="line2"></div>
                        </div>
                        <div class="content-box2">
                            <div class="content2 active">
                                <p id="details">

                                </p>
                            </div>

                            <div class="content2">
                                <p id="interactions">

                                </p>
                            </div>

                            <div class="content2">
                                <p id="guidelines">

                                </p>
                            </div>

                            <div class="content2">
                                <p id="effects">

                                </p>
                            </div>

                            <div class="content2">
                                <p id="prices">

                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-buttons">
                <button type="button" id="delete-save" onclick="deleteSave()">Delete</button>
                <div class="server-message-modal">SERVER MESSAGE WILL SHOW HERE</div>
                <button type="button" id="close">Close</button>
            </div>


        </div>
    </div>

    <footer class="footer">
        <div class="container">
            <div class="f-1">
                <h2>MedExtract</h2>
                <p>
                    Lorem ipsum dolor sit amet consectetur adipisicing elit. Adipisci,
                    id aspernatur itaque cumque vitae odit sint eligendi nam libero
                    voluptate magni aperiam, veniam ullam tenetur quidem nostrum enim
                    eos a.
                </p>
            </div>

            <div class="f-2">
                <div>
                    <h2>Links</h2>
                    <ul class="nav">
                        <li><a href="#">Extract</a></li>
                        <li><a href="#">Search</a></li>
                        <li><a href="#">Settings</a></li>
                        <li><a href="#">Log Out</a></li>
                    </ul>
                </div>
            </div>

            <div class="f-3">
                <h2>Contacts</h2>
                <div class="contacts">
                    <div>
                        <img src="/Flaticons/index/location.png" /> &nbsp;
                        <p>
                            University of The East Caloocan, 105 Samson Rd, Caloocan, Metro
                            Manila
                        </p>
                    </div>
                    <div>
                        <img src="/Flaticons/index/email.png" /> &nbsp;
                        <p>nogot.markvincent@ue.edu.ph</p>
                    </div>
                    <div>
                        <img src="/Flaticons/index/call.png" /> &nbsp;
                        <p>09991624156</p>
                    </div>
                </div>
            </div>
        </div>
    </footer>

    <script>
        const tabs = document.querySelectorAll('.tab-btn');
        const contents = document.querySelectorAll('.content');

        tabs.forEach((tab, index) => {
            tab.addEventListener('click', (e) => {
                tabs.forEach(tab => { tab.classList.remove('active') });
                tab.classList.add('active');
                var line = document.querySelector('.line');
                line.style.width = e.target.offsetWidth + "px";
                line.style.left = e.target.offsetLeft + "px";

                contents.forEach(content => { content.classList.remove('active') });
                contents[index].classList.add('active');
            })
        })

        const tabs2 = document.querySelectorAll('.tab-btn2');
        const contents2 = document.querySelectorAll('.content2');

        tabs2.forEach((tab, index) => {
            tab.addEventListener('click', (e) => {
                tabs.forEach(tab => { tab.classList.remove('active') });
                tab.classList.add('active');
                var line = document.querySelector('.line2');
                line.style.width = e.target.offsetWidth + "px";
                line.style.left = e.target.offsetLeft + "px";

                contents2.forEach(content => { content.classList.remove('active') });
                contents2[index].classList.add('active');
            })
        })


        const changeUsernameForm = document.getElementById('change-username');
        const changePasswordForm = document.getElementById('change-password');
        const deleteAccountForm = document.getElementById('delete-account');

        const username = document.getElementById("username");

        const password1 = document.getElementById("password1");
        const password2 = document.getElementById("password2");
        const password3 = document.getElementById("password3");

        const deleteAcc = document.getElementById("delete_acc");


        const toggle1 = document.getElementById("show-password1");
        const toggle2 = document.getElementById("show-password2");
        const toggle3 = document.getElementById("show-password3");

        serverMessage = document.querySelector(".server-message");
        serverMessageContainer = document.querySelector(".message-container .container");
        serverMessageModal = document.querySelector(".server-message-modal");

        toggle1.addEventListener("click", () => {
            if (toggle1.checked) {
                password1.setAttribute("type", "text");
            } else {
                password1.setAttribute("type", "password");
            }
        });

        toggle2.addEventListener("click", () => {
            if (toggle2.checked) {
                password2.setAttribute("type", "text");
            } else {
                password2.setAttribute("type", "password");
            }
        });

        toggle3.addEventListener("click", () => {
            if (toggle3.checked) {
                password3.setAttribute("type", "text");
            } else {
                password3.setAttribute("type", "password");
            }
        });

        const setError = (element, message) => {
            const inputControl = element.parentElement;
            const errorDisplay = inputControl.querySelector(".error");

            errorDisplay.innerText = message;
            inputControl.classList.add("error");
            inputControl.classList.remove("success");
        };

        const setSuccess = (element) => {
            const inputControl = element.parentElement;
            const errorDisplay = inputControl.querySelector(".error");

            errorDisplay.innerText = "";
            inputControl.classList.add("success");
            inputControl.classList.remove("error");
        };



        changeUsernameForm.addEventListener("submit", (e) => {
            e.preventDefault();

            validateUsername();

            const errors = document.querySelectorAll(".error");
            const hasErrors = Array.from(errors).some((error) => error.innerText !== "");
            if (hasErrors) return;

            fetch("/user/change-username", {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    newUsername: username.value.trim(),
                }),
            })
                .then((response) => {
                    if (!response.ok) {
                        return response.text().then((message) => { throw new Error(message); });
                    }
                    return response.text();
                })
                .then((message) => {
                    showServerMessage(message);
                    setTimeout(() => location.reload(), 1500);

                })
                .catch((error) => {
                    showServerMessage(error.message, false);
                });




        });

        changePasswordForm.addEventListener("submit", (e) => {
            e.preventDefault();

            validatePassword();

            const errors = document.querySelectorAll(".error");
            const hasErrors = Array.from(errors).some((error) => error.innerText !== "");
            if (hasErrors) return;


            fetch("/user/change-password", {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    currentPassword: password1.value.trim(),
                    newPassword: password2.value.trim(),
                }),
            })
                .then((response) => {
                    if (!response.ok) {
                        return response.text().then((msg) => { throw new Error(msg); });
                    }
                    return response.text();
                })
                .then((message) => {
                    showServerMessage(message);
                    password1.value = "";
                    password2.value = "";

                })
                .catch((error) => {
                    showServerMessage(error.message, false);
                });




        });

        deleteAccountForm.addEventListener("submit", (e) => {
            e.preventDefault();

            validateDelete();

            const errors = document.querySelectorAll(".error");
            const hasErrors = Array.from(errors).some((error) => error.innerText !== "");
            if (hasErrors) return;

            fetch("/user/delete-account", {
                method: "DELETE",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    confirmation: deleteAcc.value.trim(),
                    password: password3.value.trim(),
                }),
            })
                .then((response) => {
                    if (!response.ok) {
                        return response.text().then((msg) => { throw new Error(msg); });
                    }
                    return response.text();
                })
                .then((message) => {
                    showServerMessage(message);
                    setTimeout(() => window.location.href = "/logout", 1500);

                })
                .catch((error) => {
                    showServerMessage(error.message, false);
                });





        });

        const validatePassword = () => {

            const password1Value = password1.value.trim();
            const password2Value = password2.value.trim();

            // check if password is empty

            if (password1Value === "") {
                setError(password1, "Current password is required");
            } else if (password1Value.length < 8) {
                setError(password1, "Password must be at least 8 character.");
            } else {
                setSuccess(password1);
            }

            if (password2Value === "") {
                setError(password2, "Please confirm your password");
            } else if (password2Value.length < 8) {
                setError(password2, "Password must be at least 8 character.");
            } else {
                setSuccess(password2);
            }


        };

        const validateUsername = () => {

            const usernameValue = username.value.trim();

            // check if username is empty

            if (usernameValue === "") {
                setError(username, "Username is required");
            } else {
                setSuccess(username);
            }


        };

        const validateDelete = () => {

            const deleteAccValue = deleteAcc.value.trim();
            const password3Value = password3.value.trim();

            if (deleteAccValue !== "DELETE ACCOUNT") {
                setError(deleteAcc, "Please type DELETE ACCOUNT to confirm");
            } else {
                setSuccess(deleteAcc);
            }

            if (password3Value === "") {
                setError(password3, "Current password is required");
            } else if (password3Value.length < 8) {
                setError(password3, "Password must be at least 8 character.");
            } else {
                setSuccess(password3);
            }

        };

        // Select the button and modal elements
        const showSaveBtn = document.getElementById('show-save');
        const modal_container = document.getElementById("modal_container");
        const closeBtn = document.getElementById("close");
        const allTabs2 = document.querySelector('.tabs2');
        const modal = document.querySelector('.modal');
        const deleteSaveBtn = document.getElementById('delete-save');
        // Close the modal when the close button is clicked
        closeBtn.addEventListener('click', () => {
            modal_container.classList.remove("show");
        });

        // Check if the user has history and update the #show-save button text
        const checkHistoryAndUpdateButton = async () => {
            try {
                const response = await fetch('/user/get-history');
                const data = await response.json();



                // If history_save is not empty, update button text with history info
                if (data.history_save) {
                    const historyArray = JSON.parse(data.history_save);
                    const medicineName = historyArray[0] || "Unknown Medicine"; // Fallback if empty
                    const historyDatetime = new Date(data.history_datetime);
                    showSaveBtn.textContent = `Save Slot 1 – ${medicineName} ${historyDatetime.toLocaleString()}`;
                    deleteSaveBtn.classList.add("show");
                } else {
                    // If no history, update button text to indicate empty slot
                    showSaveBtn.textContent = "Empty Save Slot 1";


                }
            } catch (error) {
                console.error('Error fetching history:', error);
            }
        };

        // Initialize the button text as soon as the script runs
        checkHistoryAndUpdateButton();

        // Listen for when the "Query History" tab is clicked
        const queryHistoryTab = document.querySelectorAll('.tab-btn')[3]; // 4th tab, "Query History"
        queryHistoryTab.addEventListener('click', async () => {
            // Only update the button text when the "Query History" tab is clicked, no modal shown
            await checkHistoryAndUpdateButton();
        });

        // Show the save modal when the "Empty Save Slot" button is clicked
        const showSave = async () => {
            modal_container.classList.add("show");
            const title = document.getElementById("modal-title");
            const details = document.getElementById("details");
            const interactions = document.getElementById("interactions");
            const guidelines = document.getElementById("guidelines");
            const effects = document.getElementById("effects");
            const prices = document.getElementById("prices");

            // Fetch user history
            try {
                const response = await fetch('/user/get-history');
                const data = await response.json();



                // If history_save is not empty, show details in the modal
                if (data.history_save) {
                    // Parse the JSON string back into an array
                    const historyArray = JSON.parse(data.history_save);

                    // Update modal title with medicine name and date
                    const medicineName = historyArray[0] || "Unknown Medicine"; // Fallback if empty
                    const historyDatetime = new Date(data.history_datetime);
                    title.textContent = `Save Slot 1 – ${medicineName} ${historyDatetime.toLocaleString()}`;

                    // Populate modal fields with history data
                    details.textContent = historyArray[1] || "";
                    interactions.textContent = historyArray[2] || "";
                    guidelines.textContent = historyArray[3] || "";
                    effects.textContent = historyArray[4] || "";
                    prices.textContent = historyArray[5] || "";

                    // Show the .tabs2 and remove the .empty class from modal
                    allTabs2.style.display = 'block';
                    modal.classList.remove("empty");
                } else {
                    // If no history, update modal with "Empty" title
                    title.textContent = "Save Slot 1 – Empty";

                    // Hide the .tabs2 and keep the .empty class on modal
                    allTabs2.style.display = 'none';
                    modal.classList.add("empty");
                }
            } catch (error) {
                console.error('Error fetching history:', error);
            }
        };

        const deleteSave = async () => {
            try {
                const response = await fetch('/user/delete-history', {
                    method: 'DELETE'
                });

                if (response.ok) {
                    const result = await response.json();
                    showServerMessageModal(result.message);
                    setTimeout(() => location.reload(), 4000);
                } else {
                    const result = await response.json();
                    showServerMessageModal(result.message || "Failed to delete history.", false);
                }

            } catch (error) {
                showServerMessageModal("Error deleting history.", false);
                console.error('Error deleting history:', error);
            }

        };

        function showServerMessage(message, isSuccess = true) {
            serverMessage.innerHTML = message;
            serverMessage.style.cssText = isSuccess
                ? "background-color: #D4EDDA; color: #1B5E20;"
                : "background-color: #F8D7DA; color: #B71C1C;";
            serverMessage.classList.add("active");
            serverMessageContainer.classList.add("active");

            setTimeout(() => {
                serverMessage.classList.remove("active");
                serverMessageContainer.classList.remove("active");
            }, 4000);
        }

        function showServerMessageModal(message, isSuccess = true) {
      serverMessageModal.innerHTML = message;
      serverMessageModal.style.cssText = isSuccess
        ? "background-color: #D4EDDA; color: #1B5E20;"
        : "background-color: #F8D7DA; color: #B71C1C;";
      serverMessageModal.classList.add("active");


      setTimeout(() => {
        serverMessageModal.classList.remove("active");
      }, 4000);
    }








    </script>
</body>

</html>